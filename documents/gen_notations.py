from sympy import *
import polanalyser.sympy as pas


def main():
    filename_md = "notations.md"
    theta = symbols("theta", real=True)
    delta = symbols("delta", real=True)

    print(f"Export notations to {filename_md}")

    notations = ""

    with open(filename_md, "w") as f:
        notations += "# Notations in Polanalyser\n\n"
        notations += "The following equations definitions of Stoke-vector and Mueller-matrix in polanalyser.\n"
        notations += "Note that, these equations are automatically generated by polanalyser's sympy feature.\n\n"

        notations += "## Stokes vector\n\n"

        notations += "$$\n"
        notations += "\\mathbf{s} = "
        notations += latex(pas.stokes())
        notations += "\n$$\n\n"

        notations += "### AoLP\n\n"
        notations += "$$\n"
        notations += latex(pas.cvtStokesToAoLP(pas.stokes()))
        notations += "\n$$\n\n"

        notations += "### DoP\n\n"
        notations += "$$\n"
        notations += latex(pas.cvtStokesToDoP(pas.stokes()))
        notations += "\n$$\n\n"

        notations += "### DoLP\n\n"
        notations += "$$\n"
        notations += latex(pas.cvtStokesToDoLP(pas.stokes()))
        notations += "\n$$\n\n"

        notations += "### DoCP\n\n"
        notations += "$$\n"
        notations += latex(pas.cvtStokesToDoCP(pas.stokes()))
        notations += "\n$$\n\n"

        notations += "### Ellipticity angle\n\n"
        notations += "$$\n"
        notations += latex(pas.cvtStokesToEllipticityAngle(pas.stokes()))
        notations += "\n$$\n\n"

        notations += "## Mueller matrix\n\n"

        notations += "$$\n"
        notations += "\\mathbf{M} = "
        notations += latex(pas.mueller())
        notations += "\n$$\n\n"

        notations += "### Linear Polarizer\n\n"
        notations += "$$\n"
        notations += latex(pas.polarizer(theta))
        notations += "\n$$\n\n"

        notations += "### Rotator\n\n"
        notations += "$$\n"
        notations += latex(pas.rotator(theta))
        notations += "\n$$\n\n"

        notations += "### Retarder\n\n"
        notations += "$$\n"
        notations += latex(pas.retarder(delta, theta))
        notations += "\n$$\n\n"

        notations += "### Quarter Waveplate\n\n"
        notations += "$$\n"
        notations += latex(pas.qwp(theta))
        notations += "\n$$\n\n"

        notations += "### Half Waveplate\n\n"
        notations += "$$\n"
        notations += latex(pas.retarder(pi, theta))
        notations += "\n$$\n\n"

        notations += "## Others\n\n"

        notations += "### Intensity through polarizer\n\n"
        notations += "$$\n"
        notations += "I(\\theta) = "
        notations += latex((pas.polarizer(theta) @ pas.stokes())[0])
        notations += "\n$$\n\n"

        notations += "### Observation of polarization camera\n\n"
        notations += "Polarization camera captures 0, 45, 90, 135 degree linear polarized light.\n\n"
        notations += "The intensity of the light through the polarizer is given by the following equations.\n\n"
        notations += "$$\n"
        notations += "\\begin{align*}\n"
        notations += "I(0) &= "
        notations += latex((pas.polarizer(0) @ pas.stokes())[0])
        notations += " \\\\"
        notations += "I(45) &= "
        notations += latex((pas.polarizer(pi / 4) @ pas.stokes())[0])
        notations += " \\\\"
        notations += "I(90) &= "
        notations += latex((pas.polarizer(pi / 2) @ pas.stokes())[0])
        notations += " \\\\"
        notations += "I(135) &= "
        notations += latex((pas.polarizer(3 * pi / 4) @ pas.stokes())[0])
        notations += " \\\\"
        notations += "\\end{align*}\n"
        notations += "$$\n\n"

        # Solve Ax=b
        i000, i045, i090, i135 = symbols("I(0) I(45) I(90) I(135)", real=True, positive=True)
        A = Matrix([pas.polarizer(0)[0, :][:3], pas.polarizer(pi / 4)[0, :][:3], pas.polarizer(pi / 2)[0, :][:3], pas.polarizer(3 * pi / 4)[0, :][:3]])
        b = Matrix([i000, i045, i090, i135])
        s_est = A.pinv() @ b

        notations += "From the observation of the polarization camera, we can estimate the stokes parameters as follows.\n\n"
        notations += "$$\n"
        notations += "\\begin{align*}\n"
        notations += "s_0 &= "
        notations += latex(s_est[0])
        notations += " \\\\"
        notations += "s_1 &= "
        notations += latex(s_est[1])
        notations += " \\\\"
        notations += "s_2 &= "
        notations += latex(s_est[2])
        notations += " \\\\"
        notations += "\\end{align*}\n"
        notations += "$$\n\n"

        # Replace \operatorname to \mathrm
        # as Github markdown does not support \operatorname
        notations = notations.replace("\\operatorname", "\\mathrm")

        # Replace add \n after \\
        notations = notations.replace("\\\\", " \\\\\n")

        f.write(notations)


if __name__ == "__main__":
    main()
